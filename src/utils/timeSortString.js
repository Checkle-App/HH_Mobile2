const timeSortString =
  "def openTimes = []; if (params['_source'].timeObject.occurence == 'once') {for (def i = 0; i < params['_source'].timeObject.intervals.length; i++) { openTimes.add(params['_source'].timeObject.intervals[i].startTime);} def onceDefaultValue = '8'; if (params['_source'].timeObject.startDate == params.todayStart) { onceDefaultValue = '0'; } if (onceDefaultValue !== '0' && params['_source'].timeObject.startDate <= params.weekOut) { onceDefaultValue = '3';} if (onceDefaultValue !== '3' && params['_source'].timeObject.startDate <= params.monthOut) { onceDefaultValue = '6';} def onceOpenTime = openTimes[0]; for (def p = 0; p < openTimes.length; p++) { if (Integer.parseInt(openTimes[p]) < Integer.parseInt(onceOpenTime)) { onceOpenTime = openTimes[p] } } return Double.parseDouble(onceDefaultValue + '.' + onceOpenTime) } if (params['_source'].timeObject.occurence == 'monthly') { for (def ii = 0; ii < params['_source'].timeObject.intervals.length; ii++) { openTimes.add(params['_source'].timeObject.intervals[ii].startTime);} def monthlyDefaultValue = '7'; if (params['_source'].timeObject.startDate <= params.weekOut) { if (params['_source'].timeObject.dayOfMonth == params.dayOfMonth) { monthlyDefaultValue = '1'; } if (monthlyDefaultValue !== '1' && params['_source'].timeObject.dayOfMonth <= params.dayOfMonthWeekOut) { monthlyDefaultValue = '4'; }} def monthlyOpenTime = openTimes[0]; for (def pp = 0; pp < openTimes.length; pp++) { if (Integer.parseInt(openTimes[pp]) < Integer.parseInt(monthlyOpenTime)) { monthlyOpenTime = openTimes[pp] } } return Double.parseDouble(monthlyDefaultValue + '.' + monthlyOpenTime) } if (params['_source'].timeObject.occurence == 'weekly') { if (params['_source'].timeObject.startDate <= params.todayStart) { def fallsOnToday = false; def todayOpenTimes = [];for (def iii = 0; iii < params['_source'].timeObject.hoursOfOperation.length; iii++) { if (params['_source'].timeObject.hoursOfOperation[iii].close != null) { if (params['_source'].timeObject.hoursOfOperation[iii].open.day == params.dayOfWeek && Integer.parseInt(params['_source'].timeObject.hoursOfOperation[iii].close.time) > Integer.parseInt(params.currentHours)) {fallsOnToday = true; todayOpenTimes.add(params['_source'].timeObject.hoursOfOperation[iii].open.time);}}} if (fallsOnToday == true) {def sortDefault = '2' ; def fallsOnTodayOpenTime = todayOpenTimes[0]; for (def ppp = 0; ppp < todayOpenTimes.length; ppp++) { if (Integer.parseInt(todayOpenTimes[ppp]) < Integer.parseInt(fallsOnTodayOpenTime)) { fallsOnTodayOpenTime = openTimes[ppp] } } return Double.parseDouble(sortDefault + '.' + fallsOnTodayOpenTime); } else {def dowNumbers = [0, 1, 2, 3, 4, 5, 6]; def newSorter = []; def trueFalseArray = []; def trueFalseArrayDow = []; for (def dd = 0; dd < dowNumbers.length; dd++) { newSorter.add(dowNumbers[dd] === params.dayOfWeek ? 20 : dowNumbers[dd] < params.dayOfWeek ? dowNumbers[dd] + 7 : dowNumbers[dd]) } for (def ddd = 0; ddd < dowNumbers.length; ddd++) { def dayActive = false; for (def aaa = 0; aaa < params['_source'].timeObject.hoursOfOperation.length; aaa++ ) { if (params['_source'].timeObject.hoursOfOperation[aaa].open != null) { if (params['_source'].timeObject.hoursOfOperation[aaa].open.day === dowNumbers[ddd]) { dayActive = true } } if (dayActive) { trueFalseArray.add(newSorter[ddd]); trueFalseArrayDow.add(dowNumbers[ddd]); } } } if(trueFalseArray.length > 0) { for(def uuu = 0; uuu < trueFalseArray.length - 1; ++uuu){ for(def j = uuu + 1; j < trueFalseArray.length; ++j){ if(trueFalseArray[uuu]>trueFalseArray[j]){def tempVar = trueFalseArray[uuu]; trueFalseArray[uuu] = trueFalseArray[j]; trueFalseArray[j] = tempVar;}}} def daysValue = Integer.toString(trueFalseArray[0]); def dowValue = trueFalseArrayDow[0]; def dayOpenTimes = []; for (def kk = 0; kk < params['_source'].timeObject.hoursOfOperation.length; kk++) {if (params['_source'].timeObject.hoursOfOperation[kk].open.day == dowValue) { dayOpenTimes.add(params['_source'].timeObject.hoursOfOperation[kk].open.time); }} def dayFinalOpenTime = dayOpenTimes[0]; for (def pppp = 0; pppp < dayOpenTimes.length; pppp++) { if (Integer.parseInt(dayOpenTimes[pppp]) < Integer.parseInt(dayFinalOpenTime)) { dayFinalOpenTime = dayOpenTimes[pppp] } } def daySortDefault = '5'; return Double.parseDouble(daySortDefault + '.' + daysValue + dayFinalOpenTime); }}} return 8}";

export default timeSortString;
